import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.C0nUeJmP.js";const t="/daily-note/assets/1_execution.BijiPlrW.png",y=JSON.parse('{"title":"执行上下文栈(后进先出)","description":"","frontmatter":{},"headers":[],"relativePath":"page/frontend/JavaScript/1_Deep/1_ExecutionContextStack.md","filePath":"page/frontend/JavaScript/1_Deep/1_ExecutionContextStack.md","lastUpdated":1716195695000}'),l={name:"page/frontend/JavaScript/1_Deep/1_ExecutionContextStack.md"},e=n(`<h1 id="执行上下文栈-后进先出" tabindex="-1">执行上下文栈(后进先出) <a class="header-anchor" href="#执行上下文栈-后进先出" aria-label="Permalink to &quot;执行上下文栈(后进先出)&quot;">​</a></h1><p>JavaScript 执行上下文栈（Execution Context Stack），也称为调用栈（Call Stack），是一种数据结构，用于管理执行上下文的创建、推入（入栈）、弹出（出栈）和切换。执行上下文栈跟踪了 JavaScript 代码的执行过程，确保代码的执行顺序和上下文的正确管理。</p><p>举例说明：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello World!&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Inside first function&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    second</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Again inside first function&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> second</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Inside second function&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Inside Global Execution Context&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div align="center"><img src="`+t+'" width="100%"></div><ol><li>全局执行上下文：当 JavaScript 程序开始执行时，首先会创建全局执行上下文，并将其推入执行上下文栈的顶部。</li><li>函数调用：当代码中存在函数调用时，会创建新的函数执行上下文，并将其推入执行上下文栈的顶部。</li><li>函数执行：当函数执行完毕时，其对应的执行上下文会从栈中弹出。</li></ol>',6),p=[e];function h(k,E,r,o,d,c){return a(),i("div",null,p)}const _=s(l,[["render",h]]);export{y as __pageData,_ as default};
